<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Achu Wilson</title>
    <link>https://achuwilson.github.io/</link>
      <atom:link href="https://achuwilson.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Achu Wilson</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© Achu Wilson 2021</copyright><lastBuildDate>Wed, 27 Jan 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://achuwilson.github.io/img/pom-card.png</url>
      <title>Achu Wilson</title>
      <link>https://achuwilson.github.io/</link>
    </image>
    
    <item>
      <title>Nonprehensile Manipulation</title>
      <link>https://achuwilson.github.io/project/2021-edgepivot/</link>
      <pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2021-edgepivot/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#how&#34;&gt;How&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#results&#34;&gt;Results&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;Humans can manipulate objects in interesting ways without even grasping them. We make use of the properties of the object as well as the environment to push, flip, throw and squeeze objects.&lt;/p&gt;
&lt;p&gt;The following video shows a human hand pushing a paper box on a table and pivoting it around an edge. We can do such a task just by relying on the forces felt on the finger.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;handdemo.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The 
&lt;a href=&#34;http://manipulation.csail.mit.edu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT 6.881 Manipulation class&lt;/a&gt; Fall 2020, which was offered entirely online, had a class project and I decided to try this. A Kuka LBR iiwa robot, fitted with a simple single finger end effector is used to achieve the task. The robot does not have the model of the object nor the environment (No prior knowledge of the dimensions of the box or the position coordinates of the edge). The workspace limitations of the robot restrict moving the object under the table, but the method could be extended for any such capable robot.&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How&lt;/h2&gt;
&lt;p&gt;Since the model of the object and environment is not provided and no external vision sensors are used, proprioceptive data alone is to be used. The joint torques and position from the robot are used in combination with the impedance control capabilities of the iiwa to estimate the model parameters. This would be an almost impossible or incredibly difficult task with a conventional position-controlled stiff robot, even if equipped with a Force/Torque sensor. The entire system is implemented in Drake as a state machine. The following paragraphs detail the approach used.&lt;/p&gt;
&lt;p&gt;Initially, the robot moves at a constant velocity in the negative z-axis. Individual joint velocities are calculated from the desired velocity using a PsuedoInverseJacobian controller. Since the iiwa does not have a joint velocity input, the computed joint velocities are integrated to obtain the joint position inputs.
&lt;img src=&#34;push0.png&#34; alt=&#34;&#34;&gt;
While the robot is moving at such a constant velocity, the force on the end effector is being monitored. IIWA provides joint torques estimated at the 7 joints. The external wrench at the end effector is calculated using the PsuedoInverseJacobian method. When the z-axis force is above an experimentally determined threshold, the state machine jumps into the next state.&lt;/p&gt;
&lt;p&gt;Once the finger touches the box, it applies a downward force and a forward velocity such that the resultant force is outside the friction cone of the contact between the box and table. Since the friction coefficient is unknown, the forces are determined experimentally.&lt;/p&gt;
&lt;p&gt;The Drake Kuka driver allows us to provide a feedforward torque to each joint. The individual feedforward torque values are calculated from the desired end-effector wrench using the Jacobian transpose methods and commanded.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;push1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;As the finger approaches the edge of the table, interesting things start to happen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;push2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;As the center of gravity moves past the edge, the gravitational force acting on it causes a torque centered around the edge. This torque generates an upwards force on the fingers (green up arrows). Since the iiwa operates in impedance control mode, it is not very stiff in the z-axis. So, it deviates minutely from the previous positions in the vertical direction, moving in an arc centered around the corner. The derivative of z-axis force is used to detect the beginning of this deviation and is used to transition the state machine to the next state.&lt;/p&gt;
&lt;p&gt;Once the box starts pivoting, the finger continues moving in the x-axis, until the vertical z-axis reaction force generated by the box on the finger is zero. The gravitational force on the object would be balanced by the horizontal component of the forces on the finger and the corner. The motion of the finger is stopped and any incremental motion will cause the object to fall.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;push3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The following plot shows the z axis finger coordinates during this time and we can clearly see the arc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;data2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The following graph shows the forces and their derivatives on the finger until the box is balanced between the finger and the corner (T3).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;data1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From 0 to T1, the finger moves down at the constant velocity. The force readings are quite noisy when the finger is not in contact with anything and the accuracy is only +/-5N.&lt;/li&gt;
&lt;li&gt;The spike at T1 is caused by contact with the object.&lt;/li&gt;
&lt;li&gt;From T1 to T2, The finger moves towards the edge, applying a constant force in the z-axis.&lt;/li&gt;
&lt;li&gt;At T2, the box starts pivoting due to torque induced by gravity. the derivative of the force is found to be a reliable estimate to detect this rather than the raw noisy force data.&lt;/li&gt;
&lt;li&gt;From T1 to T3, the z-axis force peaks and then drops. It is this force that causes the compliant z-axis to deviate in position and move in an arc, which is shown in the plot of pZ (z-axis position).&lt;/li&gt;
&lt;li&gt;At T3, the box is balanced perfectly between the finger and the corner. The force on the z-axis drops while the x-axis force increases. The motion of the finger is stopped at this point.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The points on the arc are observed and fitted onto a model of the circle to estimate the model parameters: the position coordinate of the corner and the size of the object.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;push4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once we estimate the center and radius from the arc, we plan a trajectory along the perimeter, starting from the current finger position and finishing at a position when the box is vertical.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;push5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The trajectory includes the positions of each frame (blue dots) as well as the forces (green arrows) at all these frames. This makes sure that while pivoting, the vector sum of forces direct towards the corner position.&lt;/p&gt;
&lt;p&gt;The robot then moves along the trajectory.
&lt;img src=&#34;push6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once the finger reaches the end of the above trajectory, a new trajectory is planned, along the same path to pivot the box back to the horizontal position. While executing this new trajectory, fingers move along the circular path, with tangential velocity and radial force components.&lt;/p&gt;
&lt;p&gt;Once the box is nearly vertical, the state machine transitions into a new state, in which the finger moves a little up or down to maintain a pre-determined vertical force on the box. This accounts for the accumulated position errors caused during the estimation of the model parameters. Once it is done, the state machine transitions it to the final state where the finger moves horizontally, moving the box to the initial position.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;The following video (3x sped up) shows the system in action.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/hlw0aVvvHLQ&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;
The approach works reliably and is tested with boxes of different sizes and weights as well as for different table positions.&lt;/p&gt;
&lt;p&gt;The following areas could be improved for better performance.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The system cannot detect the slip that might occur. A tactile sensorized finger (GelSight?) could be used for this.&lt;/li&gt;
&lt;li&gt;The joint torques reported by iiwa are not very accurate and are also pose dependant. This could be improved using an external F/T sensor.&lt;/li&gt;
&lt;li&gt;The estimated model may not be always perfectly accurate. The inaccuracy in the estimated edge position causes a jerking motion when we start applying force towards the center.&lt;/li&gt;
&lt;li&gt;The finger position not only depends on the commanded position but the feed-forward torque also, this makes the transition between feed-forward torque control mode and trajectory execution mode tricky and causes little jerks.&lt;/li&gt;
&lt;/ul&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>A Gentle Introduction to Kuka iiwa and Drake in Python</title>
      <link>https://achuwilson.github.io/post/iiwadrake-intro/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/post/iiwadrake-intro/</guid>
      <description>&lt;p&gt;This document serves as a quick introduction to Kuka IIWA Robot and controlling it using Drake Python API. The examples are entirely in python and is easy to port to any other robot manipulator. Make sure you read the official Kuka documentation and is familiar with the functioning before operating the robot.&lt;/p&gt;
&lt;p&gt;The codes of the examples used in this document are available at 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/achuwilson/pydrake_iiwa&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;contents&#34;&gt;&lt;strong&gt;Contents&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#kuka-system-architecture&#34;&gt;Kuka System Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#programming-the-robot&#34;&gt;Programming the Robot&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#kuka-sunrise-workbench&#34;&gt;Kuka Sunrise WorkBench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#fri&#34;&gt;FRI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#smartpad-and-workbench-video-walk-through&#34;&gt;Smartpad and Workbench Video Walk-through&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#controlling-iiwa-from-ros&#34;&gt;Controlling IIWA from ROS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#Controlling-IIWA-from-MATLAB/Simulink/Python&#34;&gt;Controlling IIWA from MATLAB/Simulink/Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#drake&#34;&gt;Drake&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#systems&#34;&gt;Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#diagrams&#34;&gt;Diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#context&#34;&gt;Context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#multibodyplant&#34;&gt;MultibodyPlant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#tutorials&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#lcm&#34;&gt;LCM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#controlling-iiwa-from-drake&#34;&gt;Controlling IIWA from Drake&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#drake-iiwa-java-application&#34;&gt;Drake IIWA Java Application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#kuka_driver&#34;&gt;kuka_driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#iiwa-lcm-interface&#34;&gt;IIWA-LCM Interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#Controlling-Custom-Robot-from-Drake&#34;&gt;Controlling Custom Robot from Drake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#manipulation-station&#34;&gt;Manipulation Station&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#&#34;&gt;Examples&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;#joint-control&#34;&gt;Joint Control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#visualizing-the-robot-state-in-Drake-visualizers&#34;&gt;Visualizing the robot state in Drake visualizers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#Adding-an-end-effector&#34;&gt;Adding an end effector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#forward-kinematics&#34;&gt;Forward Kinematics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#inverse-inematics&#34;&gt;Inverse Kinematics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#estimating-cartesian-velocities&#34;&gt;Estimating Cartesian Velocities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#Cartesian-velocity-control&#34;&gt;Cartesian velocity control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#estimating-cartesian-forces&#34;&gt;Estimating Cartesian forces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#hybrid-force-position-control&#34;&gt;Hybrid Force-Position control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#motion-planning-and-collision-avoidance&#34;&gt;Motion Planning and Collision Avoidance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#gravity-compensation&#34;&gt;Gravity Compensation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#&#34;&gt;Haptic Force Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Kuka LBR IIWA is a 7 DOF collaborative robot manipulator which has got excellent torque control capabilities in addition to the common position control features. This enables capabilities like impedance control which is much beneficial when the  robot has to interact with noisy environment models, where pure position control can break things (or even the robot). The robot has joint torque sensors on all the joints. ( It should be noted that the torque estimation is not as accurate as an external Force-Torque sensor. It is observed that the error depends on robot pose and has an accuracy of approximately 5N)&lt;/p&gt;
&lt;h2 id=&#34;kuka-system-architecture&#34;&gt;&lt;strong&gt;Kuka System Architecture&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A typical architecture of the manipulation station will be as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/architecture.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;IIWA manipulator is controlled by Kuka Sunrise Cabinet controller. It has an industrial PC running  Kuka&amp;rsquo;s version of Windows CE called Sunrise OS and a realtime OS. The sunrise OS handles the user program, GUI etc and is accessible to the user. The realtime part is hidden from the user and controls the low level hardware interfaces.&lt;/p&gt;
&lt;p&gt;The Sunrise Cabinet have multiple Ethernet interfaces. Kuka Line Interface (KLI) (Port X66) is the only one enabled by default and is used to connect the Controller to an external PC. Kuka provides Sunrise Workbench IDE with which the IIWA could be programmed in Java. The IDE also helps installing software packages and configuring settings such as network and safety configurations, input-output etc.&lt;/p&gt;
&lt;p&gt;The other interface called Fast Robot Interface (FRI) enables access to the robot controller from an external computer in real time. It operates over the Kuka Optional Network Interface (KONI) and has to be enabled by installing the FRI package. Drake uses this interface to interface with the IIWA hardware.&lt;/p&gt;
&lt;p&gt;Additional interfaces like EtherCAT, PROFINET are also available, which can be enabled by installing the corresponding software package from Kuka.&lt;/p&gt;
&lt;p&gt;Kuka Smartpad, the handheld controller allows to start and stop the programs loaded into the SunriseCabinet. In fact,  it shows the remote desktop view of the Sunrise OS running inside the Cabinet. Connecting an external monitor to the DVI port on the back side of the Sunrise Cabinet also shows the same Smartpad GUI. In addition, it is also possible to access the Smartpad GUI using Remote Desktop tools over the KLI ethernet port.&lt;/p&gt;
&lt;p&gt;The following are the default IP address of the Ethernet Ports:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    KLI :          172.31.1.147
    KONI FRI :     192.170.10.2

    Remote Desktop: 172.31.1.147
    Username:       KukaUser
    Password:       68kuka1secpw59
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following documents give a detailed overview of the Kuka IIWA Robot systems. It  is recommended to get familiarized with the IIWA system from the following documents before operating the robot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://indianinstituteofscience-my.sharepoint.com/%f0%9f%85%b1%ef%b8%8f/g/personal/achuwilson_iisc_ac_in/EV4iYsOWqzJDo67tXQCS5RkBYui1geiQtkUp61vTxEKwrA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KUKA Sunrise.OS 1.16, Operating Instructions for End Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://indianinstituteofscience-my.sharepoint.com/%f0%9f%85%b1%ef%b8%8f/g/personal/achuwilson_iisc_ac_in/Edw4l1pf6npHoR7z2O2gx-IB9v7VA7hakrdIowxQbYPMbA?e=wyLi8R&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KUKA Sunrise Cabinet Operating Instructions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://indianinstituteofscience-my.sharepoint.com/%f0%9f%85%b1%ef%b8%8f/g/personal/achuwilson_iisc_ac_in/ETb2S5FZac5DiL733qOmhicB3BOZzJFAMyjdIQaC3mI6rA?e=9Ne5Gq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;System Software KUKA Sunrise.OS 1.16, KUKA Sunrise.Workbench 1.16, Operating and Programming Instructions for System Integrators&lt;/a&gt;. This document has Java API documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTE: the linked documents could not be shared publicly as it would violate Kuka&amp;rsquo;s Copyright notice and require IISc login. You could also create a free account on 
&lt;a href=&#34;https://xpert.kuka.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kuka Xpert&lt;/a&gt; to download these&lt;/p&gt;
&lt;h2 id=&#34;programming-the-robot&#34;&gt;&lt;strong&gt;Programming the Robot&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Kuka basically provides the following two methods to program the robot&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kuka Sunrise Workbench&lt;/li&gt;
&lt;li&gt;FRI&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;kuka-sunrise-workbench&#34;&gt;&lt;strong&gt;Kuka Sunrise Workbench&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The default programming option provided by Kuka is through its Java APIs using Sunrise Workbench, which is in-fact a customized Eclipse IDE. It is not available for download on the Kuka website, as it has to match the version of the Sunrise OS running on the controller, So request for your copy of Sunrise Workbench to your Kuka robot supplier.&lt;/p&gt;
&lt;p&gt;The Java APIs may differ slightly depending upon the version of the Sunrise OS and Workbench that is being used. It is available in the  
&lt;a href=&#34;https://indianinstituteofscience-my.sharepoint.com/%f0%9f%85%b1%ef%b8%8f/g/personal/achuwilson_iisc_ac_in/ETb2S5FZac5DiL733qOmhicB3BOZzJFAMyjdIQaC3mI6rA?e=9Ne5Gq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kuka Sunrise Workbench Operating and Programming Instructions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After developing an application in the Sunrise Workbench, the user has to synchronize it with the Sunrise OS in the controller. This just copies the project files to the controller over the KLI port.&lt;/p&gt;
&lt;p&gt;Download Links&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://indianinstituteofscience-my.sharepoint.com/:u:/g/personal/achuwilson_iisc_ac_in/EVTSc15X_GRIlWSK5q1Tb30Bb0Yqsdy8eesSHTUHCa5uRg?e=tj55YR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kuka Sunrise Workbench v1.16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://indianinstituteofscience-my.sharepoint.com/:u:/g/personal/achuwilson_iisc_ac_in/EXaiVwwBq4pKsusDc46TTOQB8VykoFdGvrw-m9PZhETiDA?e=HIVX5J&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FRI Addon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://indianinstituteofscience-my.sharepoint.com/:u:/g/personal/achuwilson_iisc_ac_in/EcM-n6luAApEnvS9MxJgs4YBfm4CiQUMdh_WkRj2hqixMQ?e=tkKpXC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SmartServo Addon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://indianinstituteofscience-my.sharepoint.com/:u:/g/personal/achuwilson_iisc_ac_in/EY7uGq3RELJAsfiPXchYBXYBTzac1upeZKnQWZ3S3OYYxg?e=Vih3Jo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HRC Addon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://indianinstituteofscience-my.sharepoint.com/:u:/g/personal/achuwilson_iisc_ac_in/EV-CtR-rhjZLkxZBV-kK0oMBhW0X3Rcw1UlBOHzYOXZxNw?e=ddkZqd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sample Sunrise Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://indianinstituteofscience-my.sharepoint.com/:u:/g/personal/achuwilson_iisc_ac_in/ES0_qKtT5HNLqHYRvyvdlD8BOUA83MfFFzkkU1Ie0pmPLw?e=C48Smz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FRI Client SDK C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NOTE: While creating a new project and synchronizing it with the Controller, after changing any safety related settings, the SmartPad would show a &amp;ldquo;safety configuration not activated&amp;rdquo; error. The default password to activate the safety configuration is &lt;code&gt;ARGUS&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After loading them, applications can be selected and executed using the
Smartpad interface. The Key on the Smartpad helps switch between &lt;code&gt;AUT&lt;/code&gt; - automatic and &lt;code&gt;T1&lt;/code&gt; - reduced velocity mode.&lt;/p&gt;
&lt;h3 id=&#34;fri&#34;&gt;&lt;strong&gt;FRI&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;FRI stands for &amp;ldquo;Fast Robot Interface&amp;rdquo;, which is an addon provided by Kuka, enables real time control of the robot system. This requires control signals be generated in an external computer and sent over the KONI Ethernet port. The FRI is not enabled out of the box and has to be installed and enabled through the Sunrise workbench. The default IP address of the FRI interface is &lt;code&gt;192.170.10.2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Kuka provides FRI-Client libraries in C++ and Java, which can be found inside the examples directory after the installation of FRI library in Sunrise WorkBench. The C++ libraries can be found in the file named &lt;code&gt;FRI-Client-SDK_Cpp.zip&lt;/code&gt;. It can be used to build applications that communicates with Kuka controller over FRI.&lt;/p&gt;
&lt;p&gt;Drake uses the FRI interface to control the IIWA from an external computer.&lt;/p&gt;
&lt;h2 id=&#34;smartpad-and-workbench-video-walk-through&#34;&gt;&lt;strong&gt;Smartpad and Workbench Video Walk-through&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;TODO #1&lt;/p&gt;
&lt;h2 id=&#34;controlling-iiwa-from-ros&#34;&gt;&lt;strong&gt;Controlling IIWA from ROS&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The 
&lt;a href=&#34;https://github.com/IFL-CAMP/iiwa_stack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;iiwa_stack&lt;/code&gt;&lt;/a&gt; package can be used to interface IIWA from ROS. It uses the Smart Servoing functionality over the KLI network interface.&lt;/p&gt;
&lt;p&gt;The ROSJava nodes running on the robot controller as a Sunrise RobotApplication sends data and receives commands from a ROS master running on the external PC. The 
&lt;a href=&#34;https://github.com/IFL-CAMP/iiwa_stack/wiki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wiki&lt;/a&gt; provides detailed instructions on controlling from ROS.&lt;/p&gt;
&lt;h2 id=&#34;controlling-iiwa-from-matlabsimulinkpython&#34;&gt;&lt;strong&gt;Controlling IIWA from MATLAB/Simulink/Python&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The 
&lt;a href=&#34;https://github.com/Modi1987/KST-Kuka-Sunrise-Toolbox&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kuka Sunrise Toolbox for Matlab&lt;/a&gt; allows control of the LBR iiwa robot from MATLAB.&lt;/li&gt;
&lt;li&gt;The [Simulink-iiwa interface] (&lt;a href=&#34;https://github.com/Modi1987/Simulink-iiwa-interface&#34;&gt;https://github.com/Modi1987/Simulink-iiwa-interface&lt;/a&gt;) for Simulink based control.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://github.com/Modi1987/iiwaPy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iiwaPy&lt;/a&gt; can be used for control of the iiwa from Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the above packages are based on the Kuka Sunrise Toolbox for Matlab.&lt;/p&gt;
&lt;h1 id=&#34;drake&#34;&gt;&lt;strong&gt;Drake&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;
&lt;a href=&#34;https://drake.mit.edu/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Drake&lt;/a&gt; is a toolbox which can model dynamic systems, solve mathematical problems and has built in multibody kinematics and dynamics.&lt;/p&gt;
&lt;p&gt;Running the examples requires installation of Python bindings of Drake as documented 
&lt;a href=&#34;https://drake.mit.edu/python_bindings.html#python-bindings-binary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. These were tested in Ubuntu 18.04 with binary installation of Drake.&lt;/p&gt;
&lt;h3 id=&#34;systems&#34;&gt;&lt;strong&gt;Systems&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The basic building block of Drake is a &lt;code&gt;System&lt;/code&gt;, which has input and output ports as well as an optional state. Multiple systems can be interconnected either as a &lt;code&gt;Diagram&lt;/code&gt; or &lt;code&gt;LeafSystem&lt;/code&gt;. LeafSystems are the minimum building block and is often used for basic components like sensors, actuators, controllers, planners etc, which has a specific functionality. Drake come with many built-in systems which can be found in the 
&lt;a href=&#34;https://drake.mit.edu/doxygen_cxx/group__systems.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;official documentation&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;diagrams&#34;&gt;&lt;strong&gt;Diagrams&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Diagrams consists of multiple LeafSystems or even other Diagrams inside and are used to represent a set of interconnected systems that function as a whole.&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_drake_simplediagram.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_drake_simplediagram.py&lt;/code&gt;&lt;/a&gt; creates a simple diagram which looks as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/simplediagram.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The built-in &lt;code&gt;SystemSlider&lt;/code&gt; is used to create a GUI with 3 sliders, whose output is fed into a &lt;code&gt;PrintSystem&lt;/code&gt; which evaluates and prints the input values to terminal at a specific update rate.&lt;/p&gt;
&lt;h3 id=&#34;context&#34;&gt;&lt;strong&gt;Context&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;All &lt;code&gt;Diagram&lt;/code&gt; and &lt;code&gt;System&lt;/code&gt; has a &lt;code&gt;Context&lt;/code&gt; which embodies the state and parameters of the system. In addition to the &lt;code&gt;Context&lt;/code&gt; of the main diagram, each subsystems and sub diagrams have their own unique context with with we can interact with the internals of the systems. Given the &lt;code&gt;context&lt;/code&gt;, all methods called on a Diagram or System is deterministic and repeatable.  The &lt;code&gt;Simulator&lt;/code&gt; needs the &lt;code&gt;Diagram&lt;/code&gt; and its &lt;code&gt;Context&lt;/code&gt;for running the computations.&lt;/p&gt;
&lt;h3 id=&#34;multibodyplant&#34;&gt;&lt;strong&gt;MultibodyPlant&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;MultibodyPlant&lt;/code&gt; is one of the most important built-in systems that Drake provides. It is used to represent multiple rigid bodies connected in tree, a common practice with serial robot manipulators. It internally uses rigid body tree algorithms to compute the kinematics. &lt;code&gt;MultibodyPlant&lt;/code&gt; also has both inputs and outputs which could be connected to other systems such as controllers or visualizers.&lt;/p&gt;
&lt;h3 id=&#34;tutorials&#34;&gt;&lt;strong&gt;Tutorials&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Drake provides a set of 
&lt;a href=&#34;https://github.com/RobotLocomotion/drake/tree/master/tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tutorials&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/RobotLocomotion/drake/blob/master/tutorials/dynamical_systems.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;dynamical_systems.ipynb&lt;/code&gt;&lt;/a&gt; gives an introduction to modelling systems in Drake&lt;/p&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/RobotLocomotion/drake/blob/master/tutorials/mathematical_program.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;mathematical_program.ipynb&lt;/code&gt;&lt;/a&gt; introduces numerical programming capabilities of Drake&lt;/p&gt;
&lt;h2 id=&#34;lcm&#34;&gt;&lt;strong&gt;LCM&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://lcm-proj.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LCM&lt;/a&gt; stands for Lightweight Communications and Marshalling. It is a set of libraries that can provide publish/subscribe message passing capabilities.&lt;/p&gt;
&lt;p&gt;LCM implementatoions are available for all common programming languages and operating systems. Refer to the 
&lt;a href=&#34;https://lcm-proj.github.io/tutorial_general.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LCM example&lt;/a&gt; for a quick-start.&lt;/p&gt;
&lt;h4 id=&#34;plotting-lcm-messages&#34;&gt;&lt;strong&gt;Plotting LCM Messages&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Drake includes &lt;code&gt;drake-lcm-spy&lt;/code&gt; in &lt;code&gt;/opt/drake/bin&lt;/code&gt; to plot and visualize LCM messages.&lt;/p&gt;
&lt;h2 id=&#34;controlling-iiwa-from-drake&#34;&gt;&lt;strong&gt;Controlling IIWA from Drake&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The following diagram shows a typical architecture of a Drake based system for controlling the iiwa.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/drake_arch.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DrakeFRIPositionDriver&lt;/code&gt;  and &lt;code&gt;DrakeFRITorqueDriver&lt;/code&gt; are Java applications built using the Sunrise Workbench and running inside the Sunrise Controller. They open an FRI connection at a specified network port, to which an external computer can connect to.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kuka_driver&lt;/code&gt; is a C++ application built using the FRI-Client-SDK-Cpp and runs on the external computer. It communicates with the Sunrise Controller over the FRI/KONI interface. It also publishes and subscribes LCM messages which can be used by other programs to read/write data to the iiwa robot.&lt;/p&gt;
&lt;p&gt;Drake has a built in &lt;code&gt;LCMInterfaceSystem&lt;/code&gt; which allows drake systems to publish and subscribe to LCM messages. Other Drake systems make use of these systems to communicate with the hardware.&lt;/p&gt;
&lt;h3 id=&#34;drake-iiwa-java-application&#34;&gt;&lt;strong&gt;Drake IIWA Java Application&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The Java application runs on the on the Sunrise Controller and opens an FRI connection to which the &lt;code&gt;kuka_driver&lt;/code&gt; running on an external computer connects to.&lt;/p&gt;
&lt;p&gt;The detailed documentation and code is available in 
&lt;a href=&#34;https://github.com/RobotLocomotion/drake-iiwa-driver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;drake-iiwa-driver&lt;/code&gt;&lt;/a&gt;
There are two applications&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DrakeFRIPositionDriver&lt;/li&gt;
&lt;li&gt;DrakeFRITorqueDriver&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The DrakeFRIPositionDriver, as the name  implies allows controlling the robot in position control mode, taking in joint position commands.&lt;/p&gt;
&lt;p&gt;The DrakeFRITorqueDriver allows for the control of the robot in impedance control mode and takes in joint position as well as joint feed-forward torque commands. We would be using this mode more often.&lt;/p&gt;
&lt;p&gt;Both the drivers output robot status like joint positions, velocities, torques etc&lt;/p&gt;
&lt;h3 id=&#34;kuka_driver&#34;&gt;&lt;strong&gt;kuka_driver&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;kuka_driver&lt;/code&gt; runs on the external computer, connects to the Java application running on the robot and provides an LCM interface to read/write data.&lt;/p&gt;
&lt;p&gt;It has to be compiled as in this 
&lt;a href=&#34;https://github.com/RobotLocomotion/drake-iiwa-driver/blob/master/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; and requires FRI client SDK for compilation.&lt;/p&gt;
&lt;p&gt;After compilation, the &lt;code&gt;kuka_driver&lt;/code&gt; should be run first, so as to communicate with IIWA&lt;/p&gt;
&lt;h3 id=&#34;iiwa-lcm-interface&#34;&gt;&lt;strong&gt;IIWA-LCM Interface&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;kuka_driver&lt;/code&gt; provides read/write interface to the IIWA through LCM messages. It generates three LCM message channels&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IIWA_STATUS&lt;/code&gt; of the type &lt;code&gt;lcmt_iiwa_status&lt;/code&gt;, defined in 
&lt;a href=&#34;https://github.com/RobotLocomotion/drake/blob/master/lcmtypes/lcmt_iiwa_status.lcm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lcmt_iiwa_status.lcm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IIWA_COMMAND&lt;/code&gt; of the type &lt;code&gt;lcmt_iiwa_command&lt;/code&gt;, defined in 
&lt;a href=&#34;https://github.com/RobotLocomotion/drake/blob/master/lcmtypes/lcmt_iiwa_command.lcm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lcmt_iiwa_command.lcm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IIWA_STATUS_TELEMETRY&lt;/code&gt; of the type &lt;code&gt;lcmt_iiwa_status_telemetry&lt;/code&gt;, defined in 
&lt;a href=&#34;https://github.com/RobotLocomotion/drake/blob/master/lcmtypes/lcmt_iiwa_status_telemetry.lcm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lcmt_iiwa_status_telemetry.lcm&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default, &lt;code&gt;kuka_driver&lt;/code&gt; publishes/ subscribes these messages at 200Hz&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IIWA_STATUS&lt;/code&gt; provides the robot joint status which includes joint position, velocities and torques. An example which subscribes to the &lt;code&gt;IIWA_STATUS&lt;/code&gt; and prints the output is available in 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/lcm_examples/iiwa-lcm-listener.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lcm_examples/iiwa-lcm-listener.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IIWA_COMMAND&lt;/code&gt; is used to command joint positions with an optional feed forward joint torque. An example which subscribes to &lt;code&gt;IIWA_STATUS&lt;/code&gt; to estimate the current robot configuration and move joint 7 incrementally is available in 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/lcm_examples/iiwa-lcm-publisher.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lcm_examples/iiwa-lcm-publisher.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IIWA_STATUS_TELEMETRY&lt;/code&gt; provides timing information, which can be used to estimate the latency in the FRI communication between the external computer and the robot controller.&lt;/p&gt;
&lt;h2 id=&#34;controlling-custom-robot-from-drake&#34;&gt;&lt;strong&gt;Controlling Custom Robot from Drake&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The Kuka iiwa interface in this documentation can be adapted to interface custom robot manipulators. Following would be the minimum requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a hardware interface program similar to &lt;code&gt;kuka_driver&lt;/code&gt;, which reads and writes from the hardware. As a bare minimum, we should be able to write joint positions and read joint positions from the hardware and pass it on as LCM messages.&lt;/li&gt;
&lt;li&gt;Define custom LCM messages depending on the hardware capabilities. Take a look at 
&lt;a href=&#34;https://github.com/RobotLocomotion/drake/blob/master/lcmtypes/lcmt_iiwa_command.lcm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lcmt_iiwa_command.lcm&lt;/code&gt;&lt;/a&gt; and 
&lt;a href=&#34;https://github.com/RobotLocomotion/drake/blob/master/lcmtypes/lcmt_iiwa_status.lcm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;lcmt_iiwa_status.lcm&lt;/code&gt;&lt;/a&gt; and others defined in 
&lt;a href=&#34;https://github.com/RobotLocomotion/drake/tree/master/lcmtypes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lcmtypes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Develop Drake systems that parses the custom LCM messages and interfaces them to other Drake systems, similar to 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/iiwa_command_sender.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;iiwa_status_receiver.py&lt;/code&gt;&lt;/a&gt; and 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/iiwa_command_sender.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;iiwa_command_sender.py&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;URDF/SDF model of the robot. This will be used to create the MultibodyPlant which is used to compute the kinematics and dynamics of the system. (NOTE: use OBJ files instead of STL/DAE)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;manipulation-station&#34;&gt;&lt;strong&gt;Manipulation Station&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The manipulation station consists of the IIWA robot, the Drake systems required to communicate and parse the data with the IIWA as well as other optional hardware such as cameras, grippers etc&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;IiwaManipulationStation&lt;/code&gt;, defined in 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/iiwa_manipulation_station.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;iiwa_manipulation_station.py&lt;/code&gt;&lt;/a&gt; is a &lt;code&gt;Diagram&lt;/code&gt; which has to be included and initialized in the diagram created by the user, so as to communicate with the IIWA. It consists of the following systems:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    - LcmInterfaceSystem
    - LcmSubscriberSystem
    - LcmPublisherSystem
    - IiwaCommandSender
    - IiwaStatusReceiver
    - MultibodyPlant
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The diagram of the manipulation system looks as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/manipulation_station.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LcmInterfaceSystem&lt;/code&gt; has no inputs nor outputs nor state nor parameters; it declares only an update event that pumps LCM messages into their subscribers if the LCM stack has message(s) waiting. The subscribers will then update their outputs using their own declared events&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LcmSubscriberSystem&lt;/code&gt; subscribes to the LCM data stream and outputs the received data through a single output port.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LCMPublisherSystem&lt;/code&gt; has a single input port and outputs the received data to the LCM data stream at a specified update rate.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;IiwaStatusReceiver&lt;/code&gt;, defined in 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/iiwa_status_receiver.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;iiwa_status_receiver.py&lt;/code&gt;&lt;/a&gt; parses the &lt;code&gt;IIWA_STATUS&lt;/code&gt; LCM  message into the following vector valued outputs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    - position_commanded
    - position_measured
    - velocity_estimated
    - torque_commanded
    - torque_measured
    - torque_external
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example on using &lt;code&gt;IiwaStatusReceiver&lt;/code&gt; is available in 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_iiwa_status_receiver.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_iiwa_status_receiver.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;IiwaCommandSender&lt;/code&gt;,  defined in  
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/iiwa_command_sender.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;iiwa_command_sender.py&lt;/code&gt;&lt;/a&gt; encodes the input into &lt;code&gt;IIWA_COMMAND&lt;/code&gt; LCM message which is published by the &lt;code&gt;LcmSubscriberSystem&lt;/code&gt;. It has the following two vector valued inputs accepting vectors of size 7.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    - position
    - torque
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example usage of &lt;code&gt;IiwaCommandSender&lt;/code&gt; is available in 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_iiwa_command_sender.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_iiwa_command_sender.py&lt;/code&gt;&lt;/a&gt;. Be EXTREMELY CAUTIOUS  before running this example, as it would instantaneously command 0 positions to joints. Don&amp;rsquo;t run this example unless all joints are near to zero position.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;MultibodyPlant&lt;/code&gt; models the external plant that has to be controlled and helps in the computation of its kinematics and dynamics.&lt;/p&gt;
&lt;p&gt;The input and output ports of the individual systems inside inside a diagram has to be exported to outside so that other drake systems can interface with the inner systems. The &lt;code&gt;ExportOutput&lt;/code&gt; and &lt;code&gt;ExportInput&lt;/code&gt; methods of &lt;code&gt;DiagramBuilder&lt;/code&gt; are used for this.&lt;/p&gt;
&lt;h1 id=&#34;examples&#34;&gt;&lt;strong&gt;Examples&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;The codes of the examples used in this document are available at 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/achuwilson/pydrake_iiwa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To run the examples, follow these steps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;STEP1: Make sure that the Kuka is in &lt;code&gt;AUT &lt;/code&gt; mode in SmartPad&lt;/li&gt;
&lt;li&gt;STEP2: Select and run &lt;code&gt;DrakeFRITorqueDriver&lt;/code&gt; Application from the Smartpad&lt;/li&gt;
&lt;li&gt;STEP3: run &lt;code&gt;kuka_driver&lt;/code&gt;  in the PC. This will cause the brakes on IIWA to release&lt;/li&gt;
&lt;li&gt;STEP4: (optional) Start &lt;code&gt;drake-visualizer&lt;/code&gt; or &lt;code&gt;meshcat-server&lt;/code&gt; for examples requiring visualization&lt;/li&gt;
&lt;li&gt;STEP4: run the example&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;joint-control&#34;&gt;&lt;strong&gt;Joint Control&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_joint_slider.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_joint_slider.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this simple example, we make use of the drake &lt;code&gt;JointSliders&lt;/code&gt; system to control the joint values of the robot.
The system diagram of the example is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/jointcontrol.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The output port of the &lt;code&gt;JointSliders&lt;/code&gt; system is connected through a &lt;code&gt;FirstOrderLowPassFilter&lt;/code&gt; to the &lt;code&gt;iiwa_position&lt;/code&gt; port of the &lt;code&gt;IiwaHardwareInterface&lt;/code&gt; manipulation station. The &lt;code&gt;FirstOrderLowPassFilter&lt;/code&gt; helps to smoothen the motion by filtering out high frequency changes in position which may cause jerk.&lt;/p&gt;
&lt;h2 id=&#34;visualizing-the-robot-state-in-drake-visualizers&#34;&gt;&lt;strong&gt;Visualizing the robot state in Drake visualizers&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_iiwa_visualize.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_iiwa_visualize.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Drake has multiple visualizers and uses the SceneGraph system to output the visualizations. By default, Drake comes with a VTK based visualizer which is located in &lt;code&gt;/opt/drake/bin/drake-visualizer&lt;/code&gt;. We have to launch the visualizer before running the simulation.&lt;/p&gt;
&lt;p&gt;Drake also has a Meshcat based visualizer which can display the output in a browser window. Run &lt;code&gt;meshcat-server&lt;/code&gt; present in the same directory. Meshcat visualizer is greatly helpful when running Drake as IPython notebooks in Google Colab&lt;/p&gt;
&lt;p&gt;The system diagram of the example is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/visualize_system.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In the 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_iiwa_visualize.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_iiwa_visualize.py&lt;/code&gt;&lt;/a&gt; example,  the &lt;code&gt;MultibodyPositionToGeometryPose&lt;/code&gt; system takes in the joint positions of the robot and outputs the pose output required by the &lt;code&gt;SceneGraph&lt;/code&gt; system. The &lt;code&gt;DrakeVisualizer&lt;/code&gt; and &lt;code&gt;meshcat_visualizer&lt;/code&gt; queries the scenegraph system and updates the rendering.&lt;/p&gt;
&lt;p&gt;The DrakeVisualizer looks as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/drake-visualizer.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;adding-an-end-effector&#34;&gt;&lt;strong&gt;Adding an end effector&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_iiwa_endeffector.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_iiwa_endeffector.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This example demonstrates how to add a custom end-effector/gripper to the &lt;code&gt;IiwaManipulationStation&lt;/code&gt;. End effector models, either in URDF or SDF format could be imported and added to the &lt;code&gt;MultibodyPlant&lt;/code&gt; before finalizing it. It also needs to be welded to the last link of IIWA.&lt;/p&gt;
&lt;p&gt;Following image shows IIWA attached with the small blue finger defined in 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/models/onefinger.urdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;models/onefinger.urdf&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/endeffector.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Once the end-effector is added to the MultibodyPlant, we can refer to it by the name defined in the URDF file.&lt;/p&gt;
&lt;h2 id=&#34;forward-kinematics&#34;&gt;&lt;strong&gt;Forward Kinematics&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_FK.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_FK.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Forward Kinematics calculates the position of end effector/gripper in the world given the joint position values.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fk_system.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In this example, the low pass filtered values from the slider is used to set the joint positions of the IIWA hardware. The &lt;code&gt;iiwa_position_measured&lt;/code&gt; output port of the manipulation station is connected to the &lt;code&gt;FKSystem&lt;/code&gt;, where the joint values of the multibodyplant are updated. The &lt;code&gt;EvalBodyPoseInWorld&lt;/code&gt; function can be used to evaluate the position of the body in the world.&lt;/p&gt;
&lt;h2 id=&#34;inverse-kinematics&#34;&gt;&lt;strong&gt;Inverse Kinematics&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_IK.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_IK.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Inverse Kinematics solves for the joint positions required to reach a particular end-effector pose.&lt;/p&gt;
&lt;p&gt;Drake has a numeric 
&lt;a href=&#34;https://drake.mit.edu/doxygen_cxx/classdrake_1_1multibody_1_1_inverse_kinematics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;InverseKinematics&lt;/a&gt; solver which  formulates IK as a nonlinear optimization problem. We can specify non linear inequality constraints like minimum distance between bodies, position/orientation constraints, target gaze constraints etc.
Refer to 
&lt;a href=&#34;https://www.youtube.com/watch?v=RjKkA_6-0C4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT 6.881 Lecture 15, Motion Planning, Part 1&lt;/a&gt; for more insights on Inverse kinematics and declaring constraints. Corresponding 
&lt;a href=&#34;https://github.com/RussTedrake/manipulation/blob/master/trajectories.ipynb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IPython Notebook&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Drake also has a 
&lt;a href=&#34;https://drake.mit.edu/doxygen_cxx/namespacedrake_1_1manipulation_1_1planner.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Differential Inverse Kinematics solver&lt;/a&gt;, which calculates joint velocities using Jacobian and integrates it to calculate the joint position. The 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_IK.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_IK.py&lt;/code&gt;&lt;/a&gt; uses the differential IK method implemented in 
&lt;a href=&#34;https://github.com/RobotLocomotion/drake/blob/master/examples/manipulation_station/differential_ik.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;differential_ik.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The system diagram of the 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_IK.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_IK.py&lt;/code&gt;&lt;/a&gt; is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/ik_system.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;estimating-cartesian-velocities&#34;&gt;&lt;strong&gt;Estimating Cartesian Velocities&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_velocity_estimate.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_velocity_estimate.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;End effector velocities can be estimated by multiplying the robot Jacobian with joint velocities. Drake &lt;code&gt;MultibodyPlant&lt;/code&gt; has the &lt;code&gt;CalcJacobianSpatialVelocity&lt;/code&gt; method, which could be used to calculate the Spatial Jacobian.&lt;/p&gt;
&lt;p&gt;The system diagram of the example is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/vel_est_system.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In 
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_velocity_estimate.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_velocity_estimate.py&lt;/code&gt;&lt;/a&gt;, The output of &lt;code&gt;EndEffectorTeleop&lt;/code&gt; is used to control the cartesian end effector position through the &lt;code&gt;DifferentialIK&lt;/code&gt; system. The &lt;code&gt;iiwa_velocity_estimated&lt;/code&gt; and &lt;code&gt;iiwa_position_measured&lt;/code&gt; outputs of the manipulation station are used by the  &lt;code&gt;velocityEstimator&lt;/code&gt; system to calculate the Jacobian and corresponding  end effector velocities.&lt;/p&gt;
&lt;h2 id=&#34;cartesian-velocity-control&#34;&gt;&lt;strong&gt;Cartesian velocity control&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_velocity_control.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_velocity_control.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WARNING: Pay close attention when running this example on the real robot. The end effector keeps on moving at the commanded velocity, until the slider is moved back to zero.&lt;/p&gt;
&lt;p&gt;Joint velocities required to move the end effector at a desired velocity in cartesian space are computed using an inverse Jacobian controller.&lt;/p&gt;
&lt;p&gt;The system diagram is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/vel_ctrl_system.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The desired end effector velocity from the slider and the current joint position is fed as inputs to the  &lt;code&gt;PseudoInverseVelocityController&lt;/code&gt;. It calculates the required joint velocities, which are integrated and fed as &lt;code&gt;iiwa_position&lt;/code&gt; input.&lt;/p&gt;
&lt;h2 id=&#34;estimating-cartesian-forces&#34;&gt;&lt;strong&gt;Estimating Cartesian forces&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_force_estimate.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_force_estimate.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IIWA has joint torque sensors at all the 7 joints. This example uses jacobian transpose to estimate the forces and in cartesian space at the end effector from the measured joint torques.&lt;/p&gt;
&lt;p&gt;The system diagram of the example is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/force_est_system.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;It looks similar to the velocity estimation system, except that in this case, there is a &lt;code&gt;forceEstimator&lt;/code&gt; system that takes in &lt;code&gt;iiwa_position_measured&lt;/code&gt; and &lt;code&gt;iiwa_torque_external&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;hybrid-force-position-control&#34;&gt;&lt;strong&gt;Hybrid Force-Position control&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://github.com/achuwilson/pydrake_iiwa/blob/main/example_force_feedforward.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;example_force_feedforward.py&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In Hybrid force-position demo, the end effector is able to move to/maintain a position as well exert force in arbitrary directions.&lt;/p&gt;
&lt;p&gt;We make use of the &lt;code&gt;iiwa_feedforward_torque&lt;/code&gt; input to provide additional joint torques. These torques are calculated using Jacobian transpose pseudo-inverse in the &lt;code&gt;FeedForwardForceController&lt;/code&gt; system. while running the demo, two windows will pop up, one for controlling the cartesian position and the other for the cartesian wrench.&lt;/p&gt;
&lt;p&gt;The system diagram of the example is as follows:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/force_ctrl_system.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;motion-planning-and-collision-avoidance&#34;&gt;&lt;strong&gt;Motion Planning and Collision Avoidance&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;TODO #2&lt;/p&gt;
&lt;h2 id=&#34;gravity-compensation&#34;&gt;&lt;strong&gt;Gravity Compensation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;TODO #3&lt;/p&gt;
&lt;h2 id=&#34;haptic-force-feedback&#34;&gt;&lt;strong&gt;Haptic Force Feedback&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;TODO #4&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>In-Hand Rolling</title>
      <link>https://achuwilson.github.io/project/2020-in-hand-rolling/</link>
      <pubDate>Sun, 15 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2020-in-hand-rolling/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#previous-works&#34;&gt;Previous works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#going-further&#34;&gt;Going Further&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;This is quite recent and an exploratory side project. Recently for another project, I trained a CNN to classify the objects being grasped by a hand which has GelSight based tactile sensors. It worked pretty good (~90% accuracy) on my test objects. Analysing the false classifications indicated that the tactile data may not be perfect during all the grasps. We humans also gets confused in the same way occasionally, if we grab objects with just two fingers. We would then either proceed to close the fingers to make more contact surface area with the object or roll the object between our fingers to classify it. This would then give us more data and increases our belief probability.&lt;/p&gt;
&lt;h2 id=&#34;previous-works&#34;&gt;Previous Works&lt;/h2&gt;
&lt;p&gt;Much research has been done in tactile object recognition as well as in hand manipulation
&lt;a href=&#34;https://core.ac.uk/download/pdf/77000058.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[1]&lt;/a&gt;, 
&lt;a href=&#34;https://ieeexplore.ieee.org/document/7363508&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[2]&lt;/a&gt;. Unlike those approaches. this work explores on learning a finger movement repertoire, that could maximize the in-hand object recognition/localization capabilities.&lt;/p&gt;
&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;
&lt;p&gt;The following video shows the prototype gripper classifying two test objects (geodesic spheres with hexagonal and triangular faces, that can be better felt by touch)&lt;/p&gt;
&lt;iframe src=&#34;https://drive.google.com/file/d/1bOfoukle06T8DrrSyyc8ingNUB5qe8He/preview&#34; width=&#34;640&#34; height=&#34;480&#34; align =&#34;center&#34; &gt;&lt;/iframe&gt;
&lt;p&gt;We can see that it falsely classifies objects once in a while.&lt;/p&gt;
&lt;p&gt;A modular 3rd axis is inserted in between the finger and the gripper, which can rotate the object in hand.&lt;/p&gt;
&lt;iframe src=&#34;https://drive.google.com/file/d/1L_x2ZVm-HVFxSDLjEirT3ZcQ40vBXKNi/preview&#34; width=&#34;640&#34; height=&#34;480&#34;&gt;&lt;/iframe&gt;
&lt;p&gt;The classification probabilities during this motion are averaged to get a more accurate estimate of the object.&lt;/p&gt;
&lt;p&gt;(Note: it has been tested only with symmetric objects, which are easy to roll and is still an ongoing project)&lt;/p&gt;
&lt;h2 id=&#34;going-further&#34;&gt;Going Further&lt;/h2&gt;
&lt;p&gt;More experimentation, 3D reconstruction using techniques using ICP.&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>BlindGrasp</title>
      <link>https://achuwilson.github.io/project/2020-blindgrasp/</link>
      <pubDate>Mon, 27 Jul 2020 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2020-blindgrasp/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#previous-works&#34;&gt;Previous works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#how&#34;&gt;How&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;BlindGrasp, as the name implies, aims at grasping objects when the robot&amp;rsquo;s eyes are blindfolded. This idea had been lingering in my mind, ever since I came across the GelSight optical tactile sensor. It is a tough and challenging problem and I have been making slow, yet good progress. This is the main project that I am spending my time now and has helped us to be the finalist in the &lt;em&gt;Kuka Innovation Award 2021&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Humans have excellent grasping capabilities in unstructured environments which are still unmatched by robots. This can be attributed to the dexterous human hand, robust visual and tactile sensing capabilities as well as to the intelligent brain which makes conscious and subconscious decisions.&lt;/p&gt;
&lt;p&gt;Visual sensing is traditionally used extensively in robotics when compared to tactile sensing. Tactile sensing is harder, mainly due to the difficulty in interpreting and making sense of the complex tactile signals. The recent developments in machine learning - particularly Deep Reinforcement Learning has opened new possibilities in the making usage of such complex data.&lt;/p&gt;
&lt;p&gt;We humans can effortlessly put a hand inside a bag, search by moving it around and pick up an item or we can use our hands to dig or sieve through granular medium like sand and pick up an object. This project explores building a system which learns manipulation and grasping skills in such vision denied environments.&lt;/p&gt;
&lt;h2 id=&#34;previous-works&#34;&gt;Previous Works&lt;/h2&gt;
&lt;p&gt;Grasping objects, using tactile sensing alone as well as in granular media are explored more recently. Following are some of the early works.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;http://www.robotics.stanford.edu/~ang/papers/icra09-ProximityGrasping.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reactive Grasping Using Optical Proximity Sensors&lt;/a&gt; by Kaijen Hsaio et al.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://choice.umn.edu/deep-learning-approach-grasping-invisible&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Deep Learning Approach to Grasping the Invisible&lt;/a&gt;, by Yang Yang et al.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://ieeexplore.ieee.org/abstract/document/9158928&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vibro-Tactile Foreign Body Detection in Granular Objects based on Squeeze-Induced Mechanical Vibrations&lt;/a&gt; by Togzhan Syrymova et al.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://arxiv.org/abs/1909.04787&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MAT: Multi-Fingered Adaptive Tactile Grasping via Deep Reinforcement Learning&lt;/a&gt; by Bohan Wu et al.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://arxiv.org/abs/1805.04201&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Learning to Grasp without Seeing&lt;/a&gt; by Adithyavairavan Murali et al.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#&#34;&gt;Multimodal Haptic Perception within Granular Media via Recurrent Neural Networks&lt;/a&gt; by S.Jia et al.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are almost no works combining tactile sensing- exploration and grasping objects in granular media&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How&lt;/h2&gt;
&lt;p&gt;Bringing such novel manipulation capabilities to robots calls for better robot hands as well as algorithms. The stated goals of the project are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Building a novel tactile sensing capable gripper&lt;/li&gt;
&lt;li&gt;Develop AI techniques to make the robot learn how to explore, detect and grasp objects in unstructured-vision denied environments where tactile sensing only could be used.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Tactile Sensing Gripper consists of a two finger parallel jaw gripper, with tactile sensing capabilities. Similar to the human fingers, the inner surface of the fingers would be having a high spatial resolution tactile sensing capability and the outer surface comparatively lower resolution. The highly sensitive inner surface of the finger helps in recognizing objects from their shape, texture as well as in fine manipulation skills. The lower sensitive outer surface helps in detecting the presence of nearby objects via contact.&lt;/p&gt;
&lt;p&gt;The AI System consists of a Deep Reinforcement Learning Agent that learns how to explore the environment and to recognize/differentiate objects and pick them up. The agent uses data from the two types of tactile sensors on each of the fingers, proprioception and force sensor data from the robot arm. The agent decides the direction of motion of the end effector and the control of the gripper.&lt;/p&gt;
&lt;p&gt;As a relatively simple task to start with, grasping specific objects from an environment similar to the following setup will have to be acheived using the tactile sensing alone.&lt;/p&gt;





&lt;img src=&#34;https://achuwilson.github.io/project/2020-blindgrasp/pick1_hu5216c571185a4b1be355b78cbb1a0511_203481_450x450_fit_lanczos_2.png&#34; width=&#34;415&#34; height=&#34;450&#34; alt=&#34;picking task 1&#34;&gt;

&lt;p&gt;Ultimately, the robot is expected to learn how to pick up objects under the granular media as in the following simulation.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/a2rk8dN3KsA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;
&lt;p&gt;A novel gripper, with tactile sensing around the finger is built and we are collecting data from the real world environment. This would be augmented with data from the simulated environment and human demonstrations to train the RL agent for the task.&lt;/p&gt;
&lt;p&gt;More updates coming soon, as it is an ongoing project..!&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>Sharing on Short Notice</title>
      <link>https://achuwilson.github.io/talk/2020-sharing-short-notice/</link>
      <pubDate>Tue, 31 Mar 2020 09:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/talk/2020-sharing-short-notice/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;This webinar was designed to help educators who needed to quickly transition to remote teaching due to COVID-19.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Educators create a lot of files for teaching- slides, exercises, solutions, assignments, data, figures- that all ultimately need to be shared with other people. Having a link for sharing your teaching materials can save you time and pain, but it is hard to get started if youâve never shared your resources online before. In this webinar, weâll give a tour of the R Markdown ecosystem for educators that you can start to use right away. Weâll show how it can help you make your teaching more shareable, reproducible, and resilient.&lt;/p&gt;
&lt;p&gt;Read the accompanying Q&amp;amp;A blog post on the 
&lt;a href=&#34;https://education.rstudio.com/blog/2020/04/sharing-on-short-notice/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RStudio Education blog&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Background segmentation</title>
      <link>https://achuwilson.github.io/project/2020-fingervision-seg/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2020-fingervision-seg/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#previous-works&#34;&gt;Previous works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#how&#34;&gt;How&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#result&#34;&gt;Result&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;FingerVision is an optical tactile sensor
&lt;a href=&#34;https://ieeexplore.ieee.org/document/7803400&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[1]&lt;/a&gt;, which provides the RGB image of the object within the fingers in addition to the contact forces from the optical markers.&lt;/p&gt;
&lt;p&gt;Since the sensor captures the image of the background also in addition to the object, we need to seperate out the object and the background.&lt;/p&gt;
&lt;h2 id=&#34;previous-works&#34;&gt;Previous Works&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;to update later&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How&lt;/h2&gt;
&lt;p&gt;A deep learning approach is used to segment the objects and the background. Training data is collected, manually labelled and a U-Net based network is trained.
The training acheives good accuracy in a couple of tens of minutes. Transfer learning methods could be used to quickly adapt to new environments.&lt;/p&gt;
&lt;h2 id=&#34;result&#34;&gt;Result&lt;/h2&gt;
&lt;p&gt;It works, as expected.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/XZOl3pS5oLY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;The left side shows the raw sensor image and the right one is the segmented image output.&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>Chero</title>
      <link>https://achuwilson.github.io/project/2019-chero/</link>
      <pubDate>Wed, 27 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2019-chero/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#previous-works&#34;&gt;Previous works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#what-makes-it-special&#34;&gt;What makes it special&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#going-further&#34;&gt;Going Further&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;Chero is my acronym for  Chef-Robot, an ongoing project motivated by my desire to have a personal robot arm to experiment with. My long term dream of such a robot was triggered into action by the  MIT Collaborative Intelligence Challenge 2019, in which I gave a try. In addition, it as an interesting challenge and learning oppertunity to build such a system from grounds up - mechanical design-electronics controls.&lt;/p&gt;
&lt;h2 id=&#34;previous-works&#34;&gt;Previous Works&lt;/h2&gt;
&lt;p&gt;Direct drive robots are, as the name implies, are robots in which the motors directly drive the shaft without using a gearbox. It was introduced by Asada et al as early as early 80s 
&lt;a href=&#34;https://www.ri.cmu.edu/pub_files/pub4/asada_haruhiko_1981_1/asada_haruhiko_1981_1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[1]&lt;/a&gt;,
&lt;a href=&#34;https://mitpress.mit.edu/books/direct-drive-robots&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[2]&lt;/a&gt;. Direct drive robots have many inherent advantages like better torque control, dynamic response, zero backlash and friction etc. Despite all these advantages, the main disadvantage that prevented direct drive robots from becoming mainstream is mainly the low torque density of electrical motors. However, recent advancements in technology has brought us high torque BLDC motors, which are used either used directly or in combination with a  low gear ratio (&amp;lt;10) reducer. Notable robots include berkeley openarms
&lt;a href=&#34;https://berkeleyopenarms.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[3]&lt;/a&gt;,   and numerous quadrupeds like MIT Cheetah 
&lt;a href=&#34;https://ieeexplore.ieee.org/document/6631038&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4&lt;/a&gt; and works by Gavin Kenneally et al
&lt;a href=&#34;https://ieeexplore.ieee.org/document/7403902&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-makes-it-special&#34;&gt;What makes it special&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Quasi-Direct Drive&lt;/li&gt;
&lt;li&gt;Spherical shoulder and wrist joints&lt;/li&gt;
&lt;li&gt;Redundant Robot - 7DOF&lt;/li&gt;
&lt;li&gt;Cheap and affordable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The Quasi- Direct drive system consists of timing belt driven axes with a reduction ratio of 3. High torque density gimbal BLDC motors are used to actuate these joints.&lt;/p&gt;
&lt;p&gt;The robot also has spherical joints at both the shoulder and the wrist, which matches closely with human arms.  It is shown that such a wrist design can be quite helpful in dexterous manipulation applications 
&lt;a href=&#34;https://ieeexplore.ieee.org/document/8624352&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[6]&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;
&lt;p&gt;The design is almost complete, parts machined-3dprinted and a video of first 4 DOF can be seen below

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/R1Q4KODC1f4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;A 3DOF spherical wrist is also designed and assembled. It will be attached soon.&lt;/p&gt;
&lt;h2 id=&#34;going-further&#34;&gt;Going Further&lt;/h2&gt;
&lt;p&gt;Implementing controllers, integrating with Drake&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>Design of a Fully Actuated Robotic Hand With Multiple Gelsight Tactile Sensors</title>
      <link>https://achuwilson.github.io/publication/2019-gelsighthand/</link>
      <pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/publication/2019-gelsighthand/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Gelsight Gripper</title>
      <link>https://achuwilson.github.io/project/2019-gelsighthand/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2019-gelsighthand/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;#results&#34;&gt;Results&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;#going-further&#34;&gt;Going Further&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;This  work  details  the  design  of  a  novel  two  fin-ger  robot  gripper  with  multiple  Gelsight  based  optical-tactilesensors  covering  the  inner  surface  of  the  hand.  The  multipleGelsight  sensors  can  gather  the  surface  topology  of  the  objectfrom  multiple  views  simultaneously  as  well  as  can  track  theshear  and  tensile  stress.  In  addition,  other  sensing  modalitiesenable  the  hand  to  gather  the  thermal,  acoustic  and  vibrationinformation from the object being grasped. The force controlledgripper is fully actuated so that it can be used for various graspconfigurations  and  can  also  be  used  for  in-hand  manipulationtasks.  Here  we  present  the  design  of  such  a  gripper.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;h4 id=&#34;workshop-paperpdf2019-gelsighthand-irospdf&#34;&gt;
&lt;a href=&#34;https://achuwilson.github.io/pdf/2019-gelsighthand-iros.pdf&#34;&gt;Workshop Paper&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;videohttpsyoutube4hxsz9nhjwi&#34;&gt;
&lt;a href=&#34;https://youtu.be/4hxsZ9nHJWI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Video&lt;/a&gt;&lt;/h4&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/4hxsZ9nHJWI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;going-further&#34;&gt;Going Further&lt;/h2&gt;
&lt;p&gt;In hand manipulation tasks, object localisation&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>GelSight Simulation for Sim2Real Learning</title>
      <link>https://achuwilson.github.io/publication/2019-getsight-sim2real/</link>
      <pubDate>Sat, 25 May 2019 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/publication/2019-getsight-sim2real/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Gelsight for Sim2Real</title>
      <link>https://achuwilson.github.io/project/2019-gelsight_sim2real/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2019-gelsight_sim2real/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#previous-works&#34;&gt;Previous works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#what-makes-it-special&#34;&gt;What makes it special&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#result&#34;&gt;Result&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;This work explores simulating Gelsight so that agents can be trained in simulation and transferred to real hardware systems with minimal/no difficulties. This would require high fidelity simulation of the GelSight sensor.&lt;/p&gt;
&lt;h2 id=&#34;previous-works&#34;&gt;Previous Works&lt;/h2&gt;
&lt;p&gt;My initial approach
&lt;a href=&#34;#&#34;&gt;[1]&lt;/a&gt; in simulating Gelsight used raytracing techniques to recreate the 3d pointcloud of the contact surface geometry. In reality, a Poisson solver based surface reconstruction is used to reconstruct the depth image and normals from the gradient image.&lt;/p&gt;
&lt;h2 id=&#34;what-makes-it-special&#34;&gt;What makes it special&lt;/h2&gt;
&lt;p&gt;This approach simulates the raw gradient RGB image coming from the sensor.&lt;/p&gt;
&lt;h2 id=&#34;result&#34;&gt;Result&lt;/h2&gt;
&lt;p&gt;The following image shows a comparison of the simulated image and the image acquired from the real sensor on similar objects.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;sim2real.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The top row of images are acquired from the hardware and the bottom one is the simulated one.&lt;/p&gt;
&lt;p&gt;Here is a 
&lt;a href=&#34;https://achuwilson.github.io/pdf/2019-sim2real-icra.pdf&#34;&gt;paper&lt;/a&gt; detailing the approach, and presented at ICRA 2019 ViTac Workshop.&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>PulleyDrive</title>
      <link>https://achuwilson.github.io/project/2019-pulleydrive/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2019-pulleydrive/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#previous-works&#34;&gt;Previous works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#what-makes-it-special&#34;&gt;What makes it special&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#status&#34;&gt;Status&lt;/a&gt;
5&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;PulleyDrive is a side project exploring speed reduction/torque amplification using the principle of pulleys. This project was supported by the &amp;ldquo;ProjXpo&amp;rdquo; program under MIT Innovation Initiative.&lt;/p&gt;
&lt;h2 id=&#34;previous-works&#34;&gt;Previous Works&lt;/h2&gt;
&lt;p&gt;This work was mainly inspired by the cable-pulley based actuation of the Ambidex robot 
&lt;a href=&#34;https://ieeexplore.ieee.org/document/8016639&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-makes-it-special&#34;&gt;What makes it special&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Zero Backlash&lt;/li&gt;
&lt;li&gt;LightWeight&lt;/li&gt;
&lt;li&gt;High Stiffness&lt;/li&gt;
&lt;li&gt;Not Expensive&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;
&lt;p&gt;The following video shows a prototype in operation.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/e1tY6uB41l4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/br&gt;
&lt;/br&gt;
&lt;/br&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://achuwilson.github.io/projects/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/projects/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>https://achuwilson.github.io/about/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Resume</title>
      <link>https://achuwilson.github.io/resume/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/resume/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Talks &amp; Workshops</title>
      <link>https://achuwilson.github.io/talks/</link>
      <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/talks/</guid>
      <description></description>
    </item>
    
    <item>
      <title>LICENSE: CC-BY-SA</title>
      <link>https://achuwilson.github.io/license/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>https://achuwilson.github.io/license/</guid>
      <description>&lt;p&gt;My 
&lt;a href=&#34;https://achuwilson.github.io/post/&#34;&gt;blog posts&lt;/a&gt; are released under a 
&lt;a href=&#34;http://creativecommons.org/licenses/by-sa/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Creative Commons Attribution-ShareAlike 4.0 International License&lt;/a&gt;.&lt;/p&gt;
&lt;center&gt;
&lt;i class=&#34;fab fa-creative-commons fa-2x&#34;&gt;&lt;/i&gt;&lt;i class=&#34;fab fa-creative-commons-by fa-2x&#34;&gt;&lt;/i&gt;&lt;i class=&#34;fab fa-creative-commons-sa fa-2x&#34;&gt;&lt;/i&gt;
&lt;/center&gt;
</description>
    </item>
    
    <item>
      <title>Modular, Whole Finger Tactile Sensing Gripper</title>
      <link>https://achuwilson.github.io/publication/2018-finger-icra/</link>
      <pubDate>Fri, 25 May 2018 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/publication/2018-finger-icra/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Round Tactile Sensing Finger</title>
      <link>https://achuwilson.github.io/project/2018-roundfinger/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2018-roundfinger/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#previous-works&#34;&gt;Previous works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#what-makes-it-special&#34;&gt;What makes it special&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#going-further&#34;&gt;Going Further&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#subsequent-works&#34;&gt;Subsequent Works&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;Robot fingers are almost always flat and rectangular. This is owing to their simplicity in design, control and better contact surface area, thereby giving a better grip.&lt;/p&gt;
&lt;p&gt;However, human fingers are round and more streamlined. It helps hand to navigate/explore in cluttered environments without much difficulty. In addition, the tactile sensing capability all around the human finger surface helps in making better sense of the environment contacts.&lt;/p&gt;
&lt;h2 id=&#34;previous-works&#34;&gt;Previous Works&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;#to be update later&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-makes-it-special&#34;&gt;What makes it special&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Round the surface tactile sensing&lt;/li&gt;
&lt;li&gt;Simple construction&lt;/li&gt;
&lt;li&gt;Cheap and affordable&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The cross sectional view of the finger is as shown below
&lt;img src=&#34;modfinger1.jpg&#34; alt=&#34;Tactile Round Finger, Sectional View&#34;&gt;&lt;/p&gt;
&lt;p&gt;It consists of a cylindrical glass tube coated with a layer of transparent silicone elastomer. The deformable elastomer has colored markers on its outer surface, which is then tracked by a wide angle camera placed at one end of the glass tube. The camera is able to get a 360 degree image of the surface of the finger, which is then de-warped to rectangular images for better understanding and processing. The other end of the tube has a spherical mirror. The reflected image of the markers from the spherical mirror provides view from another angle and is intended to be used in future to reconstruct the three dimensional position of the markers using stereo reconstruction.&lt;/p&gt;
&lt;p&gt;Using off the shelf components ensured that the cost of the modular tactile finger is kept low. A 75 x 12 mm laboratory test tube is used as the cylindrical tube. The elastomer has Shore A hardness of 15 and is made using high transparent platinum cure silicone, which is molded into a thin sheet and wrapped over the test tube. The parabolic mirror is made using a chrome coated metal ball bearing. The finger is compatible with commonly available webcams and better results were obtained using a wide angle Raspberry Pi Camera.&lt;/p&gt;





&lt;img src=&#34;https://achuwilson.github.io/project/2018-roundfinger/modfinger2_hu8a6b4578a9891b16984e60644ebb7f80_1251968_350x350_fit_q90_lanczos.jpg&#34; width=&#34;281&#34; height=&#34;350&#34; alt=&#34;Modular Finger&#34;&gt;

&lt;p&gt;A two finger parallel gripper configuration can be easily achieved using such a finger





&lt;img src=&#34;https://achuwilson.github.io/project/2018-roundfinger/modfinger4_hud9647231be864811fc59faa85c73d3b7_13259_350x350_fit_lanczos_2.png&#34; width=&#34;208&#34; height=&#34;350&#34; alt=&#34;Modular Finger&#34;&gt;
&lt;/p&gt;
&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;
&lt;p&gt;The following image shows the raw output from the camera





&lt;img src=&#34;https://achuwilson.github.io/project/2018-roundfinger/raw_hu2370913120953bb7a5b23bac81215b84_113488_350x350_fit_q90_lanczos.jpg&#34; width=&#34;350&#34; height=&#34;263&#34; alt=&#34;Alternate Text&#34;&gt;

and then it is pre-processed and the dots are tracked for its position





&lt;img src=&#34;https://achuwilson.github.io/project/2018-roundfinger/im_tracking_hu6d075425c3e1aa968eaa100ca478f374_45867_350x350_fit_q90_lanczos.jpg&#34; width=&#34;350&#34; height=&#34;339&#34; alt=&#34;Alternate Text&#34;&gt;
&lt;/p&gt;
&lt;h2 id=&#34;going-further&#34;&gt;Going Further&lt;/h2&gt;
&lt;p&gt;The next steps would be attaching it to a gripper and collecting real world data.&lt;/p&gt;
&lt;h2 id=&#34;subsequent-works&#34;&gt;Subsequent Works&lt;/h2&gt;
&lt;p&gt;These are some subsequent works by others and could be references for future works.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;https://arxiv.org/abs/2008.05404&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GelTip: A Finger-shaped Optical Tactile Sensor for Robotic Manipulation&lt;/a&gt; by Daniel Gomes et al.
&lt;a href=&#34;https://danfergo.github.io/geltip/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[website]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://arxiv.org/abs/2004.00685&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Sensorized Multicurved Robot Finger with Data-driven Touch Sensing via Overlapping Light Signals&lt;/a&gt; by Pedro Placenza et al. 
&lt;a href=&#34;https://youtu.be/PVw8Qy7BHU0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[video]&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>Gelsight Simulation 1</title>
      <link>https://achuwilson.github.io/project/2017-gelsight_sim/</link>
      <pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2017-gelsight_sim/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#how&#34;&gt;How&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#result&#34;&gt;Result&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;This is my initial approach in modelling the behaviour of GelSight tactile sensors in simulation. I resorted to simulation as I did not have access to the real sensor or resources to build one.&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How&lt;/h2&gt;
&lt;p&gt;I used the physics simulator Bullet. It had softbody simulation, which I thought would be useful for simulating the elastomer of GelSight. But it turned out that the softbody simulation was a basic and needed much more development. So, I indirectly modelled Gelsight using the raytest functionality in bullet. It returns the depth at which a ray makes contact with a solid body.&lt;/p&gt;
&lt;h2 id=&#34;result&#34;&gt;Result&lt;/h2&gt;
&lt;p&gt;Following is the video of the simulated gelsight gripper. The Kuka iiwa has a WSG 50 gripper fitted with a gelsight sensor. The sensor has a sensing area of 24x24mm and has a resolution of 256x256 pixels in the planar sensing area. It outputs standard ROS 3D pointcloud data, which is displayed in RViz.The simulation was run in my laptop and the pointcloud could be generated at 5Hz

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/IO02smLcDQE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Even though I could simulate the sensor, I soon ran into comptational limits of my laptop. &lt;/DIV&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Design and Development of a Magneto-Rheological Linear Clutch for Force controlled Human Safe Robots</title>
      <link>https://achuwilson.github.io/publication/2017-magnetorheological-clutch/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/publication/2017-magnetorheological-clutch/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Quadruped with Active spine</title>
      <link>https://achuwilson.github.io/project/2017-activespine_quadruped/</link>
      <pubDate>Sat, 27 May 2017 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2017-activespine_quadruped/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#previous-works&#34;&gt;Previous Works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#results&#34;&gt;Results&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#references&#34;&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;This is a side project to explore whether quadrupeds can be made to land on all four legs safely after they are dropped/thrown in random orientations.&lt;/p&gt;
&lt;h2 id=&#34;previous-works&#34;&gt;Previous Works&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://en.wikipedia.org/wiki/Cat_righting_reflex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cat righting reflex&lt;/a&gt; been extensively studied before. In 1942 US Air Force played with kittens in microgravity. The same lab, in 1962, published a report titled 
&lt;a href=&#34;http://www.dtic.mil/dtic/tr/fulltext/u2/400354.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Weightless Man: Self-Rotation Techniques&lt;/a&gt;, as a guidline for future astronauts on how to move around in zero gravity. 1960s. The falling cat was also studiedextensively by NASA to prepare the astronauts for Zero-G environments. A 1969 paper titled 
&lt;a href=&#34;http://www.sciencedirect.com/science/article/pii/0020768369900869&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Dynamical Explanation of the Falling Cat Phenomenon&lt;/a&gt; explains this.&lt;/p&gt;
&lt;p&gt;Past research attributes the cat reflex to law of conservation of momentem. Flexible bodies can generate internal forces and moments, by the motion of limbs. But the rest of the body rotates in opposite direction owing to the conservation of momentum, so that net angular momentum remains zero. However the rate of rotation can be controlled by extending or pulling back the limbs. Wikipedia summarises it to three key steps:&lt;/p&gt;
&lt;p&gt;1.Bend in the middle so that the front half of their body rotates about a different axis from the rear half.
2.Tuck their front legs in to reduce the moment of inertia of the front half of their body and extend their rear legs to increase the moment of inertia of the rear half of their body so that they can rotate their front further (as much as 90Â°) while the rear half rotates in the opposite direction less (as little as 10Â°).
3.Extend their front legs and tuck their rear legs so that they can rotate their rear half further while their front half rotates in the opposite direction less.&lt;/p&gt;
&lt;p&gt;Depending on the catâs flexibility and initial angular momentum, if any, the cat may need to perform steps two and three repeatedly in order to complete a full 180Â° rotation.&lt;/p&gt;
&lt;p&gt;Past works on using active spine in legged robots specialized rotation in the axis perpendicular to the saggital plane and was aimed at improving the gait. My research focusess on rotation in the axis perpendicular to the transverse plane. I developed an inertial reoreintation controller. It controls the extension and tucking in of the quadruped limbs, so that the cranial and caudal part rotates with different velocities owing to the conserved momentum. The controller thus uses the inertia of the quadruped to reorient itself.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;A quadruped was modelled in the Bullet simulator and a simple state machine based controller was implemented. It works beautifully as in the following video&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/4Hg29l2iCJo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;status&#34;&gt;Status&lt;/h2&gt;
&lt;p&gt;As the system is verified in simulation, now it has to be implemented in hardware.
I am working on a small quadruped during freetime and it will be updated later.&lt;/p&gt;
&lt;p&gt;Here are some photos of it in progress.&lt;/p&gt;
&lt;p&gt;




&lt;img src=&#34;https://achuwilson.github.io/project/2017-activespine_quadruped/quad1_hub3d4f15a59a31c668d66105d0dde93e6_333603_450x450_fit_q90_lanczos.jpg&#34; width=&#34;450&#34; height=&#34;338&#34; alt=&#34;quadruped image 1&#34;&gt;






&lt;img src=&#34;https://achuwilson.github.io/project/2017-activespine_quadruped/quad2_hu86232e7e403934dbd3ee3c0182a4e2fe_299174_450x450_fit_q90_lanczos.jpg&#34; width=&#34;450&#34; height=&#34;338&#34; alt=&#34;quadruped image 2&#34;&gt;
&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;p&gt;will be updated later as time permits.&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>MR CLutch</title>
      <link>https://achuwilson.github.io/project/2017-mrclutch/</link>
      <pubDate>Thu, 27 Apr 2017 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2017-mrclutch/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;#result&#34;&gt;Result&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;This work proposes a Magneto Rheological linear clutch  for  use  in  human  safe  robotic  applications.  The  force  transmitted to the links of the robot must be precisely controlled for  any  manipulator  if  it  has  to  be  operated  safely  alongside  humans.  The  traditional  approaches  to  this  problem  is  using  various    compliant    actuating    schemes    like    Series    Elastic    Actuators,  Joint  Torque  Control  etc.  Research  on  the  usage  of  smart  materials  that  change  their  properties  on  application  of  electrical or magnetic fields for human safe robots have gained momentum  recently.  Studies  on  the  feasibility  of  Magneto-Rheological   actuators   has   been   done   already.   This   paper   introduces a MR clutch which can control the force transmitted by a linear actuator. The electromechanical model of the linear clutch has been developed, implemented in hardware, and tested using a prototype one Degree of Freedom arm. The design of the clutch is detailed and the performance is characterized thorough a series of experiments. The results suggest that the linear clutch serves well for the precise force control of a linear actuator.&lt;/p&gt;
&lt;h2 id=&#34;result&#34;&gt;Result&lt;/h2&gt;
&lt;h4 id=&#34;conference-paperpdf2017-mr-clutch-icrapdf&#34;&gt;
&lt;a href=&#34;https://achuwilson.github.io/pdf/2017-mr-clutch-icra.pdf&#34;&gt;Conference Paper&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;videohttpsyoutubees0q4eb1tyo&#34;&gt;
&lt;a href=&#34;https://youtu.be/ES0q4eb1TYo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Video&lt;/a&gt;&lt;/h4&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/ES0q4eb1TYo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>Robot arm for testing of touchscreen applications </title>
      <link>https://achuwilson.github.io/publication/2017-touchtest-patent/</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/publication/2017-touchtest-patent/</guid>
      <description>&lt;p&gt;Publication Number WO/2017/051263&lt;/p&gt;
&lt;p&gt;Publication Date 30.03.2017&lt;/p&gt;
&lt;p&gt;International Application No. PCT/IB2016/053292&lt;/p&gt;
&lt;p&gt;International Filing Date 04.06.2016&lt;/p&gt;
&lt;p&gt;IPC G06F 11/22 2006.01&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2048 Solver Robot</title>
      <link>https://achuwilson.github.io/project/2015-2048/</link>
      <pubDate>Tue, 27 Oct 2015 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2015-2048/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#How&#34;&gt;How&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#result&#34;&gt;Result&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;2048
&lt;a href=&#34;https://en.wikipedia.org/wiki/2048_%28video_game%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[1]&lt;/a&gt;  is a single-player sliding block puzzle game. The objective of the game is to slide numbered tiles on a grid to combine them to create a tile with the number 2048.&lt;/p&gt;
&lt;p&gt;This was a weekend hobby project, to make use of a robot arm, computer vision and AI techniques to solve and play the game.&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How&lt;/h2&gt;
&lt;p&gt;The state of the game is inferred from the smartphone screen. Screenshots are perodically captured via the ADB interface. The image is pre-processed and an OCR is done to detect the digits on each tile.&lt;/p&gt;
&lt;p&gt;Given the current game state, an alpha-beta pruning algorithm predicts the next best action. The action space is swipe in Left/Right/Up/Bottom directions. The robot arm then would move towards the screen and make the swipe&lt;/p&gt;
&lt;h2 id=&#34;result&#34;&gt;Result&lt;/h2&gt;
&lt;p&gt;See for yourself!.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/hUNTeZJSUWE&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;It not only wins the game, but also scores unbelievable scores.&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>Autonomous Drone Landing</title>
      <link>https://achuwilson.github.io/project/2015-quadrotor_landing/</link>
      <pubDate>Mon, 27 Apr 2015 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2015-quadrotor_landing/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#results&#34;&gt;Results&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;This was a small project done for the qualification round of MBZIRC Challenge 2015. The drone would lift off, move in a circular pattern with incrasing readius and searching for the marker using the downward facing camera. Once the marker is localized, a simple path planner is used to plan the trajectory to land the drone on the rover.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;Even though we didnt make it to the finals, it was a good learning experience.&lt;/p&gt;
&lt;p&gt;Here is a video of it.

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/QIklrzh8k6U&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>Chippu</title>
      <link>https://achuwilson.github.io/project/2010-chippu/</link>
      <pubDate>Thu, 27 Oct 2011 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2010-chippu/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;Chippu was a small social robot made as a side project. It could understand speech commands, make conversations, recocnize faces and navigate on his own using SLAM and help me with my emails and calender, like an assistant. All the functionalities was implemented using the publically available packages in ROS. This was an attempt to learn and get familiar with ROS by building something.&lt;/p&gt;
&lt;p&gt;Here are some of the videos of chippu.&lt;/p&gt;
&lt;p&gt;Just moving around

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/KoJ7E7-5jwo&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Speech recognition was implemented using Julius and trained with my voice.

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/zO5MvISidJI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>HAPS</title>
      <link>https://achuwilson.github.io/project/2011-haps/</link>
      <pubDate>Wed, 27 Apr 2011 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2011-haps/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&#34;#results&#34;&gt;Results&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;This is my undergraduate college project.&lt;/p&gt;
&lt;p&gt;A high altitude platfrom based communication system, which can be rapidly deployed using a balloon is designed and implemented. It is similar to the Project Loon by Google, which was later announced.&lt;/p&gt;
&lt;p&gt;This page will be updated later as time permits and more details are 
&lt;a href=&#34;https://achuwilson.wordpress.com/2012/05/18/long-range-rf-link-using-nrf24l01-rf-transceiver/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;We could not deploy it on a real weather balloon as we were constrained by resources. Instead, the developed system was fixed at the top of a high rise building and we were able to make long distance communication beyond line of sight, using the system as a transponder.&lt;/p&gt;
&lt;p&gt;In addition, we won the &lt;strong&gt;Best Project Award&lt;/strong&gt; from the college for the year of 2012.&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>RollerBot</title>
      <link>https://achuwilson.github.io/project/2009-rollerbot/</link>
      <pubDate>Tue, 27 Apr 2010 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2009-rollerbot/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;p&gt;RollerBot is a two wheeled, cylindrical robot, which could be used for remote surveillance applications. It drew inspiration from the Recon Scout ThrowBot
&lt;a href=&#34;#&#34;&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;rollerbot-fullsize.jpg&#34; alt=&#34;Roller Bot&#34;&gt;&lt;/p&gt;
&lt;p&gt;The main body is made from a PVC pipe which houses the batteries, motors, Camera+Mic, AV transmitter and the RF remote control receiver. The robot is controlled from a remote handheld controller over an RF link. The wheels are custom made and a small leg provides the reaction force for the wheels.&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>Smart Notice Board</title>
      <link>https://achuwilson.github.io/project/2009-smart_notice_board/</link>
      <pubDate>Sat, 27 Mar 2010 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2009-smart_notice_board/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#how&#34;&gt;How&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#results&#34;&gt;Results&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;This is another hobby project. Any display solution with a VGA input can be used a the notice board. Users text the messages to be displayed, along with an access code to a predefined number. The system would them display the messgae on the display&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How&lt;/h2&gt;
&lt;p&gt;The system is built around an AVR microcontroller and a GSM modem. The GSM modem has a SIM card provided by the netork provider and can receive text messages. The microcontroller controls the modem and reads the incomming messages through AT commands over a serial port. The user has to send the text message prepended with the security access code. This prevents unauthorized people from spamming the system,&lt;/p&gt;
&lt;p&gt;Once the text to be displayed is received and authenticated. The AVR microcontroller sends it over to the display as a VGA signal. Even though the tiny AVR controller does not have a VGA port, VGA signals are generated by bitbanging through the SPI port.&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;Here is a video of the system in operation.

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/sg7snEejMzI&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
    <item>
      <title>Self parking car</title>
      <link>https://achuwilson.github.io/project/2009-self-parking-car/</link>
      <pubDate>Fri, 27 Mar 2009 00:00:00 +0000</pubDate>
      <guid>https://achuwilson.github.io/project/2009-self-parking-car/</guid>
      <description>&lt;DIV align=&#34;justify&#34;&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;a href=&#34;#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#how&#34;&gt;How&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;#results&#34;&gt;Result&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;what-and-why&#34;&gt;What and Why&lt;/h2&gt;
&lt;p&gt;This is a small side project during my undergraduate days, to master embedded systems and robotics skills.&lt;/p&gt;
&lt;h2 id=&#34;how&#34;&gt;How&lt;/h2&gt;
&lt;p&gt;The robot car consists of IR distance sensors on its sides and wheel encoders. These data streams are fed into a state machine, which looks for empty parking spots. If found any, the state machine would initialize the parking subroutine, and executes a parking maneuver.&lt;/p&gt;
&lt;p&gt;




&lt;img src=&#34;https://achuwilson.github.io/project/2009-self-parking-car/parkingcar_hu08f097a3ed191a1b7d6a8778b58680d4_157737_450x450_fit_q90_lanczos.jpg&#34; width=&#34;450&#34; height=&#34;338&#34; alt=&#34;parking robot car&#34;&gt;

The above image shows the setup used.&lt;/p&gt;
&lt;h2 id=&#34;result&#34;&gt;Result&lt;/h2&gt;
&lt;p&gt;Some trials!

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/GDYHJPsIQ2M&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/p&gt;
&lt;/DIV&gt;
</description>
    </item>
    
  </channel>
</rss>
